syntax = "proto3";

package calculator;

option go_package = "calculator/calculatorpb";

// sum request and response
message SumRequest{
    int32 first_number = 1;
    int32 second_number = 2;
}
message SumResponse{
    int32 result = 1;
}

// div request and response
message DivRequest{
    int32 first_number = 1;
    int32 second_number = 2;
}
message DivResponse{
    int32 result = 1;
}

// multiply request and response
message MultiplyRequest{
    int32 first_number = 1;
    int32 second_number = 2;
}
message MultiplyResponse{
    int32 result = 1;
}

// sub request and response
message SubRequest{
    int32 first_number = 1;
    int32 second_number = 2;
}
message SubResponse{
    int32 result = 1;
}

message PrimeNumberCompositionRequest{
    int32 number = 1;
}

message PrimeNumberCompositionResponse{
    int32 result = 1;
}

message ComputeAvgRequest{
    int32 number = 1;
}

message ComputeAvgResponse{
    int32 result = 1;
}

message FindMaximumRequest{
    int32 number = 1;
}

message FindMaximumResponse{
    int32 result = 1;
}

message SquareRootRequest{
    int32 number = 1;
}

message SquareRootResponse{
    double number_root = 1;
}

// CalculateService Service. all services that we provide.
service CalculateService{
    // unary rpc services
    rpc Sum(SumRequest) returns (SumResponse){};
    rpc Div(DivRequest) returns (DivResponse){};
    rpc Multiply(MultiplyRequest) returns (MultiplyResponse){};
    rpc Sub(SubRequest) returns (SubResponse){};

    // server streaming rpc services
    rpc PrimeNumberComposition(PrimeNumberCompositionRequest) returns (stream PrimeNumberCompositionResponse){};

    // client streaming
    rpc ComputeAvg(stream ComputeAvgRequest) returns (ComputeAvgResponse){};

    // BiDi streaming
    rpc FindMaximum(stream FindMaximumRequest) returns (stream FindMaximumResponse){};

    // error handling
    // this rpc will through an exception if the sent number is negetive
    // The error being sent is of type INVALID_ARGUMENT
    rpc SquareRoot(SquareRootRequest) returns (SquareRootResponse){};
}
